name: Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read # to fetch code (actions/checkout)

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-unices:
    strategy:
      fail-fast: false
      matrix:
        # python_version: ["3.8", "3.12"]
        # shell: ['bash', 'zsh', 'csh', 'tcsh', 'ksh', 'fish']
        # os: [ubuntu-latest, macos-latest]
        python_version: ["3.8"]
        shell: ['bash']
        os: [ubuntu-latest]
        exclude:
          # No formula for csh on Homebrew
          - os: macos-latest
            shell: csh
    runs-on: ${{ matrix.os }}
    env:
      TEST_USER: mb110
    steps:
      - name: Install shell
        run : |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt update
            sudo apt install -y ${{ matrix.shell }}
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install ${{ matrix.shell }}
          fi
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          allow-prereleases: true
      - name: Clean XDG_CONFIG_HOME
        # fish depends on this variable being empty or correctly set.
        run: |
          sed 's/^XDG_CONFIG_HOME.*$//' /etc/environment > clean_environment
          sudo mv clean_environment /etc/environment
        if: runner.os == 'Linux'
      - name: Set users Python
        # This only set to Python above for runner user by default.
        run: |
          ln -s $(which python3) /usr/local/bin/python3
          ln -s $(which python) /usr/local/bin/python
        if: runner.os == 'Linux'
      - name: Make user
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo useradd -m $TEST_USER
            # Inconvenient short-circuit for interactive shells on Debian.
            sudo rm /home/$TEST_USER/.bashrc
          elif [ "$RUNNER_OS" == "macOS" ]; then
            sudo sysadminctl -addUser $TEST_USER -password foobar
          fi
      - name: Set shell
        run: |
          sudo chsh -s $(which ${{ matrix.shell }}) $TEST_USER
      - name: Set up SSH
        run: |
          ssh-keygen -b 2048 -t rsa -f sshkey -q -N ""
          SSH_DIR=/home/$TEST_USER/.ssh
          sudo mkdir $SSH_DIR
          sudo cp sshkey.pub $SSH_DIR/authorized_keys
          sudo chown -R $TEST_USER:$TEST_USER $SSH_DIR
      - name: Run in user
        run: |
          SHELL_NAME=$(sudo -u $TEST_USER echo $SHELL)
          echo "Shell name: ${SHELL_NAME}"
          ssh -o StrictHostKeyChecking=no -i sshkey $TEST_USER@localhost ${SHELL_NAME} -c env | grep PATH
          sudo -u $TEST_USER python3 -m pip install git+https://github.com/${{ github.repository }}
          sudo -u $TEST_USER python3 -m puser
          ssh -o StrictHostKeyChecking=no -i sshkey $TEST_USER@localhost ${SHELL_NAME} -c env | grep PATH
          ssh -o StrictHostKeyChecking=no -i sshkey $TEST_USER@localhost ${SHELL_NAME} -c puser-config
      # Uncomment to get SSH access for testing
      - name: Setup tmate session
        if: failure()
        uses: mxschmitt/action-tmate@v3

  test-windows:
    strategy:
      matrix:
        python_version: ["3.8", "3.12"]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          allow-prereleases: true
      - name: Install
        run: |
          pip install ".[test]"
      - name: Test set configuration
        run: |
          env
          python -m puser
      - name: Show environment
        run: env
      - name: Test user script
        run: puser-config
